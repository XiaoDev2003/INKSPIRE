<?php
// üìÅ backend/controllers/UserController.php

require_once __DIR__ . '/../config/db.php';
require_once __DIR__ . '/../models/User.php';
require_once __DIR__ . '/../utils/helpers.php';

class UserController {
    private $userModel;

    public function __construct() {
        $conn = (new Database())->getConnection();
        $this->userModel = new User($conn);
    }

    // Ph∆∞∆°ng th·ª©c handleRequest ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè ƒë·ªÉ tu√¢n theo m·∫´u OOP nh·∫•t qu√°n
    // C√°c ph∆∞∆°ng th·ª©c ri√™ng l·∫ª s·∫Ω ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp t·ª´ routes/api.php
    
    public function getUsers() {
        if (isset($_GET['user_id'])) {
            $user = $this->userModel->getById($_GET['user_id']);
            jsonResponse($user ?: ['error' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'], $user ? 200 : 404);
        } else {
            $users = $this->userModel->getAll();
            jsonResponse($users);
        }
    }

    public function createUser() {
        $data = json_decode(file_get_contents("php://input"), true);
        if (!isset($data['username'], $data['email'])) {
            jsonResponse(['error' => 'Thi·∫øu t√™n ƒëƒÉng nh·∫≠p ho·∫∑c email'], 400);
        }
        if ($this->userModel->findByEmail($data['email'])) {
            jsonResponse(['error' => 'Email ƒë√£ t·ªìn t·∫°i'], 409);
        }
        $result = $this->userModel->create($data);
        jsonResponse($result ? ['message' => 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng', 'user_id' => $this->userModel->getLastInsertId()] : ['error' => 'Th√™m th·∫•t b·∫°i'], $result ? 201 : 500);
    }

    public function updateUser() {
        $data = json_decode(file_get_contents("php://input"), true);
        if (!isset($data['user_id'])) {
            jsonResponse(['error' => 'Thi·∫øu user_id'], 400);
        }
        $result = $this->userModel->update($data);
        jsonResponse($result ? ['message' => 'C·∫≠p nh·∫≠t th√†nh c√¥ng'] : ['error' => 'C·∫≠p nh·∫≠t th·∫•t b·∫°i'], $result ? 200 : 500);
    }

    public function deleteUser() {
        $data = json_decode(file_get_contents("php://input"), true);
        if (!isset($data['user_id'])) {
            jsonResponse(['error' => 'Thi·∫øu user_id'], 400);
        }
        $result = $this->userModel->delete($data['user_id']);
        jsonResponse($result ? ['message' => 'X√≥a th√†nh c√¥ng'] : ['error' => 'X√≥a th·∫•t b·∫°i'], $result ? 200 : 500);
    }

    public function updateProfile() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            jsonResponse(['error' => 'Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c POST'], 405);
        }

        // Ki·ªÉm tra session
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        if (!isset($_SESSION['user_id']) || !$_SESSION['is_logged_in']) {
            jsonResponse(['error' => 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin'], 401);
        }

        $userId = $_SESSION['user_id'];
        $data = json_decode(file_get_contents("php://input"), true);

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!$data) {
            jsonResponse(['error' => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'], 400);
        }

        // L·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
        $updateData = [];
        $allowedFields = ['first_name', 'last_name', 'phone', 'gender', 'avatar_url'];

        foreach ($allowedFields as $field) {
            if (isset($data[$field])) {
                $updateData[$field] = sanitizeInput($data[$field]);
            }
        }

        if (empty($updateData)) {
            jsonResponse(['error' => 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t'], 400);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        $success = $this->userModel->updateUser($userId, $updateData);

        if ($success) {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ c·∫≠p nh·∫≠t
            $updatedUser = $this->userModel->getUserById($userId);
            unset($updatedUser['password_hash']); // X√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi tr·∫£ v·ªÅ

            jsonResponse([
                'success' => true,
                'message' => 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
                'user' => $updatedUser
            ]);
        } else {
            jsonResponse(['error' => 'C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i'], 500);
        }
    }

    public function changePassword() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            jsonResponse(['error' => 'Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c POST'], 405);
        }

        // Ki·ªÉm tra session
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        if (!isset($_SESSION['user_id']) || !$_SESSION['is_logged_in']) {
            jsonResponse(['error' => 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u'], 401);
        }

        $userId = $_SESSION['user_id'];
        $data = json_decode(file_get_contents("php://input"), true);

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!isset($data['current_password'], $data['new_password'])) {
            jsonResponse(['error' => 'Thi·∫øu th√¥ng tin m·∫≠t kh·∫©u'], 400);
        }

        // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u m·ªõi
        if (strlen($data['new_password']) < 6) {
            jsonResponse(['error' => 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'], 400);
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
        $currentPasswordValid = $this->userModel->verifyPassword($userId, $data['current_password']);
        if (!$currentPasswordValid) {
            jsonResponse(['error' => 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'], 400);
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        $newPasswordHash = password_hash($data['new_password'], PASSWORD_DEFAULT);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        $success = $this->userModel->updatePassword($userId, $newPasswordHash);

        if ($success) {
            jsonResponse([
                'success' => true,
                'message' => 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
            ]);
        } else {
            jsonResponse(['error' => 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i'], 500);
        }
    }

    public function getUserProfile() {
        if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
            jsonResponse(['error' => 'Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c GET'], 405);
        }

        // Ki·ªÉm tra session
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        if (!isset($_SESSION['user_id']) || !$_SESSION['is_logged_in']) {
            jsonResponse(['error' => 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin'], 401);
        }

        $userId = $_SESSION['user_id'];

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        $user = $this->userModel->getUserById($userId);
        if ($user) {
            unset($user['password_hash']); // X√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi tr·∫£ v·ªÅ
            jsonResponse([
                'success' => true,
                'user' => $user
            ]);
        } else {
            jsonResponse(['error' => 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'], 404);
        }
    }
}